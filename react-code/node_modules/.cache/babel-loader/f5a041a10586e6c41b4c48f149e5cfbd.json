{"ast":null,"code":"var _jsxFileName = \"/home/adityaa/Desktop/stuff/code/shayari/react-code/src/CommentSection.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { AuthContext } from './AuthContext';\nimport SingleComment from './Comment';\nfunction CommentSection({\n  shayariId\n}) {\n  const [content, setContent] = useState('');\n  const [comments, setComments] = useState([]); // Move comments state here\n  const {\n    authTokens\n  } = useContext(AuthContext);\n\n  // Fetch comments for the current Shayari when the component mounts or when shayariId changes\n  useEffect(() => {\n    fetchComments();\n  }, [shayariId]);\n\n  // Function to fetch comments\n  const fetchComments = () => {\n    fetch(`http://127.0.0.1:8000/comments/?shayari=${shayariId}`).then(response => response.json()).then(data => {\n      setComments(data);\n    }).catch(error => console.error('Error fetching comments:', error));\n  };\n\n  // Handle form submission for adding a comment\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newComment = {\n      content,\n      shayari: shayariId\n    };\n    fetch('http://127.0.0.1:8000/comments/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${authTokens === null || authTokens === void 0 ? void 0 : authTokens.access}`\n      },\n      body: JSON.stringify(newComment)\n    }).then(async response => {\n      if (response.ok) {\n        setContent(''); // Clear the input field\n        fetchComments(); // Refresh the comments after successful submission\n      }\n    }).catch(error => console.error('Error posting comment:', error));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comment-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, \"Comments\"), authTokens ? /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"add-comment-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"Add a comment...\",\n    value: content,\n    onChange: e => setContent(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, \"Post Comment\")) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, \"Please log in to add a comment.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comment-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, comments.length > 0 ? comments.map(elem => /*#__PURE__*/React.createElement(SingleComment, {\n    key: elem.id,\n    elem: elem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 44\n    }\n  })) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }, \"No comments yet.\")));\n}\nexport default CommentSection;","map":{"version":3,"names":["React","useState","useContext","useEffect","AuthContext","SingleComment","CommentSection","shayariId","content","setContent","comments","setComments","authTokens","fetchComments","fetch","then","response","json","data","catch","error","console","handleSubmit","e","preventDefault","newComment","shayari","method","headers","Authorization","access","body","JSON","stringify","ok","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","value","onChange","target","required","type","length","map","elem","key","id"],"sources":["/home/adityaa/Desktop/stuff/code/shayari/react-code/src/CommentSection.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { AuthContext } from './AuthContext';\nimport SingleComment from './Comment';\n\nfunction CommentSection({ shayariId }) {\n    const [content, setContent] = useState('');\n    const [comments, setComments] = useState([]);  // Move comments state here\n    const { authTokens } = useContext(AuthContext);\n\n    // Fetch comments for the current Shayari when the component mounts or when shayariId changes\n    useEffect(() => {\n        fetchComments();\n    }, [shayariId]);\n\n    // Function to fetch comments\n    const fetchComments = () => {\n        fetch(`http://127.0.0.1:8000/comments/?shayari=${shayariId}`)\n            .then((response) => response.json())\n            .then((data) => {\n                setComments(data);\n            })\n            .catch((error) => console.error('Error fetching comments:', error));\n    };\n\n    // Handle form submission for adding a comment\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const newComment = { content, shayari: shayariId };\n\n        fetch('http://127.0.0.1:8000/comments/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${authTokens?.access}`,\n            },\n            body: JSON.stringify(newComment),\n        })\n            .then(async (response) => {\n                if (response.ok) {\n                    setContent('');  // Clear the input field\n                    fetchComments();  // Refresh the comments after successful submission\n                }\n            })\n            .catch((error) => console.error('Error posting comment:', error));\n    };\n\n    return (\n        <div className=\"comment-section\">\n            <h3>Comments</h3>\n            {authTokens ? (\n                <form onSubmit={handleSubmit} className=\"add-comment-form\">\n                    <input\n                        placeholder=\"Add a comment...\"\n                        value={content}\n                        onChange={(e) => setContent(e.target.value)}\n                        required\n                    />\n                    <button type=\"submit\">Post Comment</button>\n                </form>\n            ) : (\n                <p>Please log in to add a comment.</p>\n            )}\n\n            {/* Render the list of comments */}\n            <div className=\"comment-list\">\n                {comments.length > 0 ? (\n                    comments.map((elem) => <SingleComment key={elem.id} elem={elem} />)\n                ) : (\n                    <p>No comments yet.</p>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default CommentSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}